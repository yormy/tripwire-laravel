import{_ as e,o as a,c as t,V as i}from"./chunks/framework.5f0cae6b.js";const p=JSON.parse('{"title":"Roadmap","description":"","frontmatter":{},"headers":[],"relativePath":"general/roadmap.md","filePath":"general/roadmap.md"}'),o={name:"general/roadmap.md"},l=i(`<h1 id="roadmap" tabindex="-1">Roadmap <a class="header-anchor" href="#roadmap" aria-label="Permalink to &quot;Roadmap&quot;">​</a></h1><h2 id="pipeline-upgrade" tabindex="-1">Pipeline upgrade <a class="header-anchor" href="#pipeline-upgrade" aria-label="Permalink to &quot;Pipeline upgrade&quot;">​</a></h2><p>Add auto style checkers and integration checkers, which ones?</p><ul><li>travisci?</li><li>styleci?</li><li>laravel pint?</li><li>psalm?</li></ul><h2 id="managment-of-blocks-events" tabindex="-1">Managment of blocks/events <a class="header-anchor" href="#managment-of-blocks-events" aria-label="Permalink to &quot;Managment of blocks/events&quot;">​</a></h2><h3 id="frontend-api" tabindex="-1">Frontend API: <a class="header-anchor" href="#frontend-api" aria-label="Permalink to &quot;Frontend API:&quot;">​</a></h3><ul><li>List of blocks</li><li>List of events</li><li>mark/unmark block permanent</li><li>Documentation + registering routes</li><li>Generic response wrapper</li></ul><h3 id="frontend-views" tabindex="-1">Frontend Views <a class="header-anchor" href="#frontend-views" aria-label="Permalink to &quot;Frontend Views&quot;">​</a></h3><ul><li>Show current blocks</li><li>Show blocked users/ ips</li><li>Show events</li><li>mark/unmark block permanent</li><li>get reset key</li><li>Documentation</li></ul><h2 id="email-notifications" tabindex="-1">Email Notifications <a class="header-anchor" href="#email-notifications" aria-label="Permalink to &quot;Email Notifications&quot;">​</a></h2><ul><li>Send the user an email when they are blocked (only on first block of the day). Maybe cache a value with a decay, that once released a new email can be sent ?</li><li>Send admin Digest of blocked ip per day/ slack</li></ul><h2 id="file-upload-with-unit-tests" tabindex="-1">File Upload With Unit Tests <a class="header-anchor" href="#file-upload-with-unit-tests" aria-label="Permalink to &quot;File Upload With Unit Tests&quot;">​</a></h2><h2 id="how-to-determine-if-a-file-is-an-attempt-of-malicious-request" tabindex="-1">How to determine if a file is an attempt of malicious request? <a class="header-anchor" href="#how-to-determine-if-a-file-is-an-attempt-of-malicious-request" aria-label="Permalink to &quot;How to determine if a file is an attempt of malicious request?&quot;">​</a></h2><ul><li>type not equal to extension</li><li>wrong extensions/ double extensions</li><li>filename invalid / nullbyte</li><li>Checkout my own upload checker (laravelvalidation/upload) to see possible malicious detection points</li></ul><h2 id="requestsize-config" tabindex="-1">RequestSize Config <a class="header-anchor" href="#requestsize-config" aria-label="Permalink to &quot;RequestSize Config&quot;">​</a></h2><ul><li>Allow fields to be excluded from the requestsize wire</li><li>Specify size per field</li><li>Add additional test for these specs</li></ul><h2 id="geofencing-and-geodata" tabindex="-1">GeoFencing and GeoData <a class="header-anchor" href="#geofencing-and-geodata" aria-label="Permalink to &quot;GeoFencing and GeoData&quot;">​</a></h2><ul><li>Test all integrations with lookup services</li><li>Once IP is looked up, store in database so no subsequent calls needed (speed and costs reduction). Store IP + data in separate table and just reference in log/block</li><li>Collect location data from offline database <a href="https://www.maxmind.com/en/home" target="_blank" rel="noreferrer">https://www.maxmind.com/en/home</a></li><li>Store locationdata in database, but use different async job to update the database with locationdata</li></ul><h2 id="unit-test" tabindex="-1">Unit Test <a class="header-anchor" href="#unit-test" aria-label="Permalink to &quot;Unit Test&quot;">​</a></h2><p>Creating more unit and feature tests like:</p><ul><li>globally ignore certain cookies</li><li>globally ignore certain headers</li><li>Agent</li><li>Bot</li><li>Referer</li><li>honeypot</li><li>php</li><li>swear</li><li>rfi</li><li>bot</li><li>throttletripped</li></ul><h2 id="how-to-summarize-logs-to-a-block-how-to-make-teh-block-depended-on-the-violations" tabindex="-1">How to summarize logs to a block / how to make teh block depended on the violations <a class="header-anchor" href="#how-to-summarize-logs-to-a-block-how-to-make-teh-block-depended-on-the-violations" aria-label="Permalink to &quot;How to summarize logs to a block / how to make teh block depended on the violations&quot;">​</a></h2><p>Currently all violations scores are added to 1 large sum. This is then used to block or no block Would be nice to block hardcore (sqli) or softcore (login) and show different views/messages/emails How to spec what to add together to determine a block type</p><h2 id="review-config-comments" tabindex="-1">Review config comments <a class="header-anchor" href="#review-config-comments" aria-label="Permalink to &quot;Review config comments&quot;">​</a></h2><p>Are they still up to date with the docs</p><h3 id="psalm-upgrade-and-fix" tabindex="-1">PSALM Upgrade and Fix <a class="header-anchor" href="#psalm-upgrade-and-fix" aria-label="Permalink to &quot;PSALM Upgrade and Fix&quot;">​</a></h3><pre><code>&lt;UndefinedThisPropertyFetch errorLevel=&quot;info&quot; /&gt;
&lt;UndefinedThisPropertyAssignment errorLevel=&quot;info&quot; /&gt;
&lt;UndefinedInterfaceMethod errorLevel=&quot;info&quot; /&gt;
&lt;UnusedParam errorLevel=&quot;info&quot; /&gt;
&lt;PossiblyNullReference errorLevel=&quot;info&quot; /&gt;
&lt;PossiblyNullArgument errorLevel=&quot;info&quot; /&gt;
&lt;PossiblyNullPropertyFetch errorLevel=&quot;info&quot; /&gt;

&lt;UndefinedPropertyFetch errorLevel=&quot;info&quot; /&gt;
</code></pre>`,27),n=[l];function r(s,d,c,h,u,m){return a(),t("div",null,n)}const b=e(o,[["render",r]]);export{p as __pageData,b as default};
