import{_ as e,o as t,c as i,V as a}from"./chunks/framework.5f0cae6b.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"v1/definitions.md","filePath":"v1/definitions.md"}'),o={name:"v1/definitions.md"},s=a('<h2 id="definitions" tabindex="-1">Definitions <a class="header-anchor" href="#definitions" aria-label="Permalink to &quot;Definitions&quot;">​</a></h2><h3 id="log" tabindex="-1">Log <a class="header-anchor" href="#log" aria-label="Permalink to &quot;Log&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Definition: Log</p><p>Every request that is recognized as a hack attempt is logged regardless it blocks the rest of the request or not.</p></div><h3 id="block" tabindex="-1">Block <a class="header-anchor" href="#block" aria-label="Permalink to &quot;Block&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Definition: Block</p><p>A block prevents a certain user or Ip from accessing your site. As long a the block is valid no requests will continue to your site. This block is only temporarily and will be removed after a few seconds. However if the same user/ip continues their attempts and gets blocked again the time will increase exponentially. A block can be based on a ip address, user id, and or browser-fingerprint (if supplied by your frontend)</p></div><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Definition: Reject</p><p>When a request is suspicious it is rejected and this could lead eventually to a block</p></div><h3 id="wire" tabindex="-1">Wire <a class="header-anchor" href="#wire" aria-label="Permalink to &quot;Wire&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Definition: Wire</p><p>A checked that parses the request to see it if violates certain rules. If a wire is triggered it is considered as a hack attempt</p></div><h3 id="honeypot-wire" tabindex="-1">Honeypot Wire <a class="header-anchor" href="#honeypot-wire" aria-label="Permalink to &quot;Honeypot Wire&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Definition: Honeypot wire</p><p>A honeypot is a security mechanism that creates a virtual trap to lure attackers. When Tripwire recognizes that certain illegal fields are filled in, then we know this is not a normal user and an action will be taken</p></div><h3 id="attackscore" tabindex="-1">AttackScore <a class="header-anchor" href="#attackscore" aria-label="Permalink to &quot;AttackScore&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Definition: AttackScore</p><p>Every wire has a attackScore (either specified or default), the higher the score the more severe and certain you are that this is a malicious request.</p></div><h3 id="punish" tabindex="-1">Punish <a class="header-anchor" href="#punish" aria-label="Permalink to &quot;Punish&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Definition: Punish</p><p>When the user attempts too many times, the user is blocked (or punished).</p></div>',15),r=[s];function c(n,l,d,h,p,u){return t(),i("div",null,r)}const b=e(o,[["render",c]]);export{m as __pageData,b as default};
