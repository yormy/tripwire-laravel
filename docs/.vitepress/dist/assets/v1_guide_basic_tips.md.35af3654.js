import{_ as e,o as a,c as t,V as i}from"./chunks/framework.5f0cae6b.js";const y=JSON.parse('{"title":"Installation tips","description":"","frontmatter":{},"headers":[],"relativePath":"v1/guide/basic/tips.md","filePath":"v1/guide/basic/tips.md"}'),o={name:"v1/guide/basic/tips.md"},s=i('<h1 id="installation-tips" tabindex="-1">Installation tips <a class="header-anchor" href="#installation-tips" aria-label="Permalink to &quot;Installation tips&quot;">​</a></h1><p>You can simply install everything and use it right out of the box. This will add a tremendous layer of protection to your site and reduce the levels of malicious request ever coming through.</p><p>I advice you to initially turn on <strong>training_mode</strong> and <strong>debug_mode</strong>.</p><h1 id="training-mode" tabindex="-1">Training mode <a class="header-anchor" href="#training-mode" aria-label="Permalink to &quot;Training mode&quot;">​</a></h1><p>There might be requests that are generally considered malicious, but in your case they need to come through in certain areas of your app. This is not always clear when you first start using a firewall.</p><p>The training mode is designed to test your configuration rules over time to the type of requests you are receiving. Depending on your app you will receive different types of data in different areas of your app. For example you do not want to allow a url in a username field (so include rfi-wire) but you do allow it in a github profile page fields (so exclude rfi-wire).</p><p>To help you fine tune your settings you can use training mode. While Tripwire is in &#39;training-mode&#39;, it will function as normal with recording of malicious requests and adding blocks and increasing block times. This is all just as in a normal mode. The only difference is that users/ip and requests are not actually blocked, but just continue to your app. This way you can inspect the logs/blocks in your database to see if there are false positives recorded, and adjust your settings accordingly. When you are satisfied and no false positives are recorded, you can remove the training mode again.</p><p>Update your <code>.env</code></p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">TRIPWIRE_TRAINING_MODE</span><span style="color:#89DDFF;">=true</span></span></code></pre></div><h1 id="debug-mode" tabindex="-1">Debug mode <a class="header-anchor" href="#debug-mode" aria-label="Permalink to &quot;Debug mode&quot;">​</a></h1><p>The debug mode is intended to find why certain wires were tripped. This will log some additional information to the database for inspection which wire was triggered and why. This greatly speeds up your investigation of false positives.</p><p>Update your <code>.env</code></p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">TRIPWIRE_DEBUG_MODE</span><span style="color:#89DDFF;">=true</span></span></code></pre></div><h2 id="feedback" tabindex="-1">Feedback <a class="header-anchor" href="#feedback" aria-label="Permalink to &quot;Feedback&quot;">​</a></h2><p>If you notice false positives that I caused by my ruleset, please let me know and I will adjust the rules accordingly. When you do so, please include the actual payload that was triggering the wire while it should not.</p>',15),n=[s];function r(l,d,p,c,u,h){return a(),t("div",null,n)}const m=e(o,[["render",r]]);export{y as __pageData,m as default};
