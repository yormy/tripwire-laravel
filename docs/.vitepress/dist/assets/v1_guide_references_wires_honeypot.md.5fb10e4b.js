import{_ as s,o as e,c as a,V as o}from"./chunks/framework.5f0cae6b.js";const F=JSON.parse('{"title":"Honeypot","description":"","frontmatter":{},"headers":[],"relativePath":"v1/guide/references/wires/honeypot.md","filePath":"v1/guide/references/wires/honeypot.md"}'),t={name:"v1/guide/references/wires/honeypot.md"},n=o(`<h1 id="honeypot" tabindex="-1">Honeypot <a class="header-anchor" href="#honeypot" aria-label="Permalink to &quot;Honeypot&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Goal</p><p>Lure attackers to fill in certain fields that only hackers can see or fill in.</p></div><p><strong>Wikpedia:</strong> A honeypot is a computer security mechanism set to detect, deflect, or, in some manner, counteract attempts at unauthorized use of information systems. Generally, a honeypot consists of data that appears to be a legitimate part of the site which contains information or resources of value to attackers. It is actually isolated, monitored, and capable of blocking or analyzing the attackers. This is similar to police sting operations, colloquially known as &quot;baiting&quot; a suspect</p><h2 id="enabled" tabindex="-1">Enabled <a class="header-anchor" href="#enabled" aria-label="Permalink to &quot;Enabled&quot;">​</a></h2><p>Enable or disable this wire</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><p>The methods specifies which methods should be inspected</p><p>Options:</p><ul><li>&#39;post&#39;</li><li>&#39;put&#39;</li><li>&#39;patch&#39;</li><li>&#39;get&#39;</li><li>&#39;all&#39; or &#39;*&#39;</li></ul><p>The &#39;all&#39; or &#39;*&#39; is a alias to inspect all methods</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">methods</span><span style="color:#89DDFF;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">put</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// only post and put method</span></span></code></pre></div><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">methods</span><span style="color:#89DDFF;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// all methods</span></span></code></pre></div><h2 id="attack-score" tabindex="-1">Attack score <a class="header-anchor" href="#attack-score" aria-label="Permalink to &quot;Attack score&quot;">​</a></h2><p>This is this wire severity, the higher the number the more severe. All attackScores will be summarized and if it exceeds the PunishScore the block will be activated. Set this to a number that reflects the severity.</p><ul><li>A very high number will immediately block the user/ip</li><li>A low number will only block if there are many requests</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>sqli</strong> and <strong>xss</strong> are very common attack vectors with high confidence detection. You should set those to a very high number</p></div><h2 id="tripwires" tabindex="-1">Tripwires <a class="header-anchor" href="#tripwires" aria-label="Permalink to &quot;Tripwires&quot;">​</a></h2><p>Specify the list of <strong>honeypots</strong> that if these are filled in then you know this is a malicious request</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p>The following example contains 2 honeypots <code>debug</code> and <code>is_admin</code>. These fields need to be absent in every request or null or 0. Adding these fields to your request and setting it to null/0 lures a malicious person to change that into a 1 or true.</p><p>A normal user never sees that, so when Tripwire detects that these honeypots are filled with anything except null/0 then tripwire knows that this is a malicious request</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">WireDetailsConfig</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">make</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">enabled</span><span style="color:#89DDFF;">(true)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">methods</span><span style="color:#89DDFF;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">])</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">attackScore</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">500</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">tripwires</span><span style="color:#89DDFF;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">debug</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">is_admin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//... optional overrides</span></span></code></pre></div><p><a href="./optionals.html">optional global overriders</a></p>`,23),l=[n];function p(r,i,c,h,d,y){return e(),a("div",null,l)}const u=s(t,[["render",p]]);export{F as __pageData,u as default};
